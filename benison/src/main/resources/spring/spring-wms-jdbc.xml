<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:jee="http://www.springframework.org/schema/jee" 
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
						http://www.springframework.org/schema/jee 
						http://www.springframework.org/schema/jee/spring-jee-3.0.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-lazy-init="false">

	<description>公用配置 </description>
	
	<!-- 自动扫描，实现注解IOC -->
	<context:component-scan base-package="com.gionee.wms" />
	
	<!-- hibernate validator -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
	
	<!-- 定义环境变量配置 -->
	<bean id="placeholderConfigurer" class="com.gionee.wms.common.SpringPropertyConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 开发配置 -->
				<value>classpath*:wms-dbconfig.properties</value>
				<value>classpath*:wms.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClass" value="${aliLibrary.db.driverClass}" />
		<!--相应驱动的jdbcUrl-->
		<property name="jdbcUrl" value="${aliLibrary.db.jdbcUrl}" />
		<!-- 数据库的用户名-->
		<property name="username" value="${aliLibrary.db.username}" />
		<!-- 数据库的密码-->
		<property name="password" value="${aliLibrary.db.password}" />
		<!--检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
		<property name="idleConnectionTestPeriod" value="${aliLibrary.db.idleConnectionTestPeriod}" />
		<!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
		<property name="idleMaxAge" value="${aliLibrary.db.idleMaxAge}" />
		<!-- 每个分区最大的连接数-->
		<property name="maxConnectionsPerPartition" value="${aliLibrary.db.maxConnectionsPerPartition}" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="${aliLibrary.db.minConnectionsPerPartition}" />
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定-->
		<property name="partitionCount" value="${aliLibrary.db.partitionCount}"/>
		<!-- 当连接池中的连接耗尽的时候 BoneCP一次同时获取的连接数，每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<property name="acquireIncrement" value="${aliLibrary.db.acquireIncrement}" />
		<!--缓存prepared statements的大小，默认值：0 -->
		<property name="statementsCacheSize" value="${aliLibrary.db.statementsCacheSize}" />
		<!--每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能-->
		<property name="releaseHelperThreads" value="${aliLibrary.db.releaseHelperThreads}" />
	</bean>
	
	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.gionee.wms.entity,com.gionee.wms.dto,com.gionee.wms.vo" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/config/ibatis/*Mapper.xml" />
	</bean>
	<!-- 扫描basePackage下所有以@BatisDao标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.gionee.wms.dao" />
		<property name="annotationClass" value="com.gionee.wms.dao.BatisDao"/>
	</bean>
	
	<!-- 事务管理器配置, 使用jdbc事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- ============声明式事务配置begin========== -->
	<!-- 商品分类事务 -->
	<tx:advice id="categoryServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="updateCategory" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="categoryServiceMethod" expression="execution(* com.gionee.wms.service.wares.CategoryServiceImpl.*(..))" />
		<aop:advisor advice-ref="categoryServiceTxAdvice" pointcut-ref="categoryServiceMethod" />
	</aop:config>
	
	<!-- 商品属性事务 -->
	<tx:advice id="skuAttrServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="addAttr" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="deleteAttr" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="updateAttr" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="skuAttrServiceMethod" expression="execution(* com.gionee.wms.service.wares.SkuAttrServiceImpl.*(..))" />
		<aop:advisor advice-ref="skuAttrServiceTxAdvice" pointcut-ref="skuAttrServiceMethod" />
	</aop:config>
	
	<!-- 商品及SKU事务 -->
	<tx:advice id="waresServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="addSku" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="updateSku" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="deleteSku" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="waresServiceMethod" expression="execution(* com.gionee.wms.service.wares.WaresServiceImpl.*(..))" />
		<aop:advisor advice-ref="waresServiceTxAdvice" pointcut-ref="waresServiceMethod" />
	</aop:config>
	
	<!-- 仓库管理事务 -->
	<tx:advice id="warehouseServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="updateWarehouseToDefault" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="warehouseServiceMethod" expression="execution(* com.gionee.wms.service.basis.WarehouseServiceImpl.*(..))" />
		<aop:advisor advice-ref="warehouseServiceTxAdvice" pointcut-ref="warehouseServiceMethod" />
	</aop:config>
	
	<!-- 配送方式管理事务 -->
	<tx:advice id="shippingServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="updateShippingToDefault" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="shippingServiceMethod" expression="execution(* com.gionee.wms.service.basis.ShippingServiceImpl.*(..))" />
		<aop:advisor advice-ref="shippingServiceTxAdvice" pointcut-ref="shippingServiceMethod" />
	</aop:config>
	
	<!-- 供应商管理事务 -->
	<tx:advice id="supplierServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="updateSupplierToDefault" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="supplierServiceMethod" expression="execution(* com.gionee.wms.service.basis.SupplierServiceImpl.*(..))" />
		<aop:advisor advice-ref="supplierServiceTxAdvice" pointcut-ref="supplierServiceMethod" />
	</aop:config>
	
	<!-- 库存事务 -->
	<tx:advice id="stockServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="increaseStock" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="decreaseStock" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="convertStock" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="stockServiceMethod" expression="execution(* com.gionee.wms.service.stock.StockServiceImpl.*(..))" />
		<aop:advisor advice-ref="stockServiceTxAdvice" pointcut-ref="stockServiceMethod" />
	</aop:config>
	
	<!-- 盘点事务 -->
	<tx:advice id="checkServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="confirm*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="checkServiceMethod" expression="execution(* com.gionee.wms.service.stock.CheckServiceImpl.*(..))" />
		<aop:advisor advice-ref="checkServiceTxAdvice" pointcut-ref="checkServiceMethod" />
	</aop:config>
	
	<!-- 订单事务 -->
	<tx:advice id="salesOrderServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="cancel*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="confirm*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="ServiceException"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="salesOrderServiceMethod" expression="execution(* com.gionee.wms.service.stock.SalesOrderServiceImpl.*(..))" />
		<aop:advisor advice-ref="salesOrderServiceTxAdvice" pointcut-ref="salesOrderServiceMethod" />
	</aop:config>
	
	<!-- 采购事务 -->
	<tx:advice id="purchaseServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="purchaseServiceMethod" expression="execution(* com.gionee.wms.service.stock.PurchaseServiceImpl.*(..))" />
		<aop:advisor advice-ref="purchaseServiceTxAdvice" pointcut-ref="purchaseServiceMethod" />
	</aop:config>
	
	<!-- 收货事务 -->
	<tx:advice id="receiveServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="confirm*" propagation="REQUIRED" rollback-for="ServiceException"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="receiveServiceMethod" expression="execution(* com.gionee.wms.service.stock.ReceiveServiceImpl.*(..))" />
		<aop:advisor advice-ref="receiveServiceTxAdvice" pointcut-ref="receiveServiceMethod" />
	</aop:config>
	
	<!-- 发货事务 -->
	<tx:advice id="deliveryServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="confirm*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="cancel*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="deliveryServiceMethod" expression="execution(* com.gionee.wms.service.stock.DeliveryServiceImpl.*(..))" />
		<aop:advisor advice-ref="deliveryServiceTxAdvice" pointcut-ref="deliveryServiceMethod" />
	</aop:config>
	
	<!-- 个体事务 -->
	<tx:advice id="indivServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="ServiceException"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="indivServiceMethod" expression="execution(* com.gionee.wms.service.wares.IndivServiceImpl.*(..))" />
		<aop:advisor advice-ref="indivServiceTxAdvice" pointcut-ref="indivServiceMethod" />
	</aop:config>
	
	<!-- 调拨事务 -->
	<tx:advice id="transferServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="confirm*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="cancel*" propagation="REQUIRED" rollback-for="ServiceException"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transferServiceMethod" expression="execution(* com.gionee.wms.service.stock.TransferServiceImpl.*(..))" />
		<aop:advisor advice-ref="transferServiceTxAdvice" pointcut-ref="transferServiceMethod" />
	</aop:config>
	
	<!-- 退货事务 -->
	<tx:advice id="backServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="cancel*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="handle*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="audit*" propagation="REQUIRED" rollback-for="ServiceException"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="backServiceMethod" expression="execution(* com.gionee.wms.service.stock.BackServiceImpl.*(..))" />
		<aop:advisor advice-ref="backServiceTxAdvice" pointcut-ref="backServiceMethod" />
	</aop:config>
	<!-- 换货事物 -->
	<tx:advice id="exchangeServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="handle*" propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="cancel*" propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="audit*" propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="create*" propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="sync*" propagation="REQUIRED" rollback-for="ServiceException,IOException" />
			<tx:method name="exchange*" propagation="REQUIRED" rollback-for="ServiceException,IOException" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="exchangeServiceMethod"
			expression="execution(* com.gionee.wms.service.exchange.ExchangeServiceImpl.*(..))" />
		<aop:advisor advice-ref="exchangeServiceTxAdvice"
			pointcut-ref="exchangeServiceMethod" />
	</aop:config>
	
	<!-- 报修单相关事物 -->
	<tx:advice id="repairServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="handle*" propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="cancel*" propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="audit*" propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="create*" propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="sync*" propagation="REQUIRED" rollback-for="ServiceException,IOException" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="repairServiceMethod"
			expression="execution(* com.gionee.wms.service.stock.RepairServiceImpl.*(..))" />
		<aop:advisor advice-ref="repairServiceTxAdvice"
			pointcut-ref="repairServiceMethod" />
	</aop:config>
	
	<!-- 统计事务 -->
	<tx:advice id="statServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="stat*" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="statServiceMethod" expression="execution(* com.gionee.wms.service.stat.OrderStatServiceImpl.*(..))" />
		<aop:advisor advice-ref="statServiceTxAdvice" pointcut-ref="statServiceMethod" />
	</aop:config>
	
	<!-- 品牌资料 邮件组等相关内容管理事务 -->
	<tx:advice id="emailBaseServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="enable*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="disable*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="brandServiceMethod" expression="execution(* com.gionee.wms.service.basis.BrandServiceImpl.*(..))" />
		<aop:advisor advice-ref="emailBaseServiceTxAdvice" pointcut-ref="brandServiceMethod" />
	</aop:config>
	<aop:config>
		<aop:pointcut id="mailGroupServiceMethod" expression="execution(* com.gionee.wms.service.basis.MailGroupServiceImpl.*(..))" />
		<aop:advisor advice-ref="emailBaseServiceTxAdvice" pointcut-ref="mailGroupServiceMethod" />
	</aop:config>
	<aop:config>
		<aop:pointcut id="mailGroupMemberServiceMethod" expression="execution(* com.gionee.wms.service.basis.MailGroupMemberServiceImpl.*(..))" />
		<aop:advisor advice-ref="emailBaseServiceTxAdvice" pointcut-ref="mailGroupMemberServiceMethod" />
	</aop:config>
	<aop:config>
		<aop:pointcut id="mailContentServiceMethod" expression="execution(* com.gionee.wms.service.basis.MailContentServiceImpl.*(..))" />
		<aop:advisor advice-ref="emailBaseServiceTxAdvice" pointcut-ref="mailContentServiceMethod" />
	</aop:config>
	<aop:config>
		<aop:pointcut id="mailHistoryServiceMethod" expression="execution(* com.gionee.wms.service.basis.MailHistoryServiceImpl.*(..))" />
		<aop:advisor advice-ref="emailBaseServiceTxAdvice" pointcut-ref="mailHistoryServiceMethod" />
	</aop:config>
	<aop:config>
		<aop:pointcut id="systemBasicConfigServiceMethod" expression="execution(* com.gionee.wms.service.basis.SystemBasicConfigServiceImpl.*(..))" />
		<aop:advisor advice-ref="emailBaseServiceTxAdvice" pointcut-ref="systemBasicConfigServiceMethod" />
	</aop:config>
	
	<!-- 采购订单管理事务 -->
	<tx:advice id="purchaseBaseServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="enable*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="disable*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="purchaseOrderServiceMethod" expression="execution(* com.gionee.wms.service.purchase.PurchaseOrderServiceImpl.*(..))" />
		<aop:advisor advice-ref="purchaseBaseServiceTxAdvice" pointcut-ref="purchaseOrderServiceMethod" />
	</aop:config>
	<aop:config>
		<aop:pointcut id="purchaseOrderGoodsServiceMethod" expression="execution(* com.gionee.wms.service.purchase.PurchaseOrderGoodsServiceImpl.*(..))" />
		<aop:advisor advice-ref="purchaseBaseServiceTxAdvice" pointcut-ref="purchaseOrderGoodsServiceMethod" />
	</aop:config>
	<aop:config>
		<aop:pointcut id="purchaseReceiveServiceMethod" expression="execution(* com.gionee.wms.service.purchase.PurchaseReceiveServiceImpl.*(..))" />
		<aop:advisor advice-ref="purchaseBaseServiceTxAdvice" pointcut-ref="purchaseReceiveServiceMethod" />
	</aop:config>
	<aop:config>
		<aop:pointcut id="supplierAssessServicMethod" expression="execution(* com.gionee.wms.service.purchase.SupplierAssessServiceImpl.*(..))" />
		<aop:advisor advice-ref="purchaseBaseServiceTxAdvice" pointcut-ref="supplierAssessServicMethod" />
	</aop:config>
	<!-- 电子运单事务 -->
	<tx:advice id="kuaidiServiceTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="enable*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="disable*" propagation="REQUIRED" rollback-for="ServiceException"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="kuaidiServiceMethod" expression="execution(* com.gionee.wms.service.stock.KuaidiServiceImpl.*(..))" />
		<aop:advisor advice-ref="kuaidiServiceTxAdvice" pointcut-ref="kuaidiServiceMethod" />
	</aop:config>
	<!-- ============声明式事务配置end========== -->
	
	<!-- ============ redis start ===============  -->
	<!--bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxActive" value="${redis.pool.maxActive}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxWait" value="${redis.pool.maxWait}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
	</bean-->
	
	<!-- shardedJedis连接池，业务中一般是读取时会使用 -->
	<!--bean id="myShardedJedisPool" class="com.gionee.wms.jedis.MyShardedJedisPool">
	    <property name="jedisPoolConfig" ref="jedisPoolConfig" />
		<property name="servers" value="${redis.servers}" />
	</bean-->
	<!-- ============ redis end ===============  -->
	
	<!-- 线程池配置,溢出策略:CallerRunsPolicy(等待执行)-->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />
		<property name="maxPoolSize" value="20" />
		<property name="queueCapacity" value="1000" />
		<property name="keepAliveSeconds" value="200" />
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"></bean>
		</property>
	</bean>
</beans>