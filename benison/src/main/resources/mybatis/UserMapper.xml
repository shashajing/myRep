<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace必须指向Dao接口 -->
<mapper namespace="com.shashajing.benison.dao.UserDao">

	<!-- 查询用户,演示: 1.输入用map传入多个参数 2.<where>语句, 智能添加where和and关键字 3.输出直接映射对象 -->
	<select id="searchUser" parameterType="map" resultType="User">
		select userId, loginName, loginPassword, userName, email, tel, status, type,editTime,editUserName
		from user
		<where>
			<if test="loginName != null">
				loginName=#{loginName}
			</if>
			<if test="loginPassword != null">
				and loginPassword=#{loginPassword}
			</if>
			<if test="userName != null">
				and userName=#{userName}
			</if>
			<if test="type != null">
				and type=#{type}
			</if>
			<if test="status != null">
				and status=#{status}
			</if>
			<if test="userId != null">
				and userId = #{userId}
			</if>
		</where>
		<if test="start != null and pageNum != null">
			 LIMIT #{start},#{pageNum};
	    </if>
	</select>
	
	<select id="countUser" parameterType="map" resultType="int">
		select count(1)
		from user
		<where>
			<if test="loginName != null">
				loginName=#{loginName}
			</if>
			<if test="loginPassword != null">
				and loginPassword=#{loginPassword}
			</if>
			<if test="userName != null">
				and userName=#{userName}
			</if>
			<if test="type != null">
				and type=#{type}
			</if>
			<if test="status != null">
				and status=#{status}
			</if>
			<if test="userId != null">
				and userId = #{userId}
			</if>
		</where>
	</select>
	
	<select id="searchUserNotBelongRole" parameterType="map" resultType="User">
		select userId, loginName, loginPassword, userName, email, tel, status, type,editTime,editUserName
		from user u where not exists (select 1 from userRole r where r.userId = u.userId and r.roleId = #{roleId})
		<if test="start != null and pageNum != null">
			 LIMIT #{start},#{pageNum};
	    </if>
	</select>
	
	<select id="countUserNotBelongRole" parameterType="map" resultType="int">
		select count(1)
		from user u where not exists (select 1 from userRole r where r.userId = u.userId and r.roleId = #{roleId})
	</select>
	<resultMap type="User" id="userAndRoleModuleMap">
		<id column="userId" property="userId" />
		<result column="loginName" property="loginName" />
		<result column="loginPassword" property="loginPassword" />
		<result column="userName" property="userName" />
		<result column="email" property="email" />
		<result column="tel" property="tel" />
		<result column="status" property="status" />
		<result column="type" property="type" />
		<result column="editTime" property="editTime" />
		<result column="editUserName" property="editUserName" />
		<collection property="roles" ofType="Role">
			<id column="roleId" property="roleId" />
			<result column="role_name" property="roleName" />
			<result column="description" property="description" />
		</collection>
		<collection property="modules" ofType="Module">
			<id column="moduleId" property="moduleId" />
			<result column="parentId" property="parentId" />
			<result column="type" property="type" />
			<result column="module_name" property="moduleName" />
			<result column="module_url" property="moduleUrl" />
		</collection>
	
	</resultMap>
	
	<select id="findUserAndRoleModule" parameterType="map" resultMap="userAndRoleModuleMap">
		
		select u.userId, u.loginName, u.loginPassword, u.userName, u.email, u.tel, u.status, u.type, u.editTime, u.editUserName,
			r.roleId, r.role_name, r.description, m.moduleId, m.parentId, m.type, m.module_name, m.module_url
			from module m, moduleRole a,userRole c, user u,role r
		where m.moduleId = a.moduleId and a.roleId = c.roleId and c.userId = u.userId and c.roleId = r.roleId and u.loginName = #{loginName}
	</select>
	
	<!-- 新增用户 -->
	<insert id="addUser" parameterType="User">
		insert into user
		(loginName,loginPassword,userName,type,email,tel,status,editTime,editUserName)
		values(#{loginName},#{loginPassword},#{userName},#{type,jdbcType=INTEGER}
		,#{email,jdbcType=VARCHAR},#{tel,jdbcType=VARCHAR},#{status,jdbcType=INTEGER}
		,#{editTime,jdbcType=TIMESTAMP},#{editUserName,jdbcType=VARCHAR});
	</insert>
	
	<!-- 编辑用户 -->
	<update id="updateUser" parameterType="User">
		update user 
		<set>
			<if test="type != null">type = #{type},</if>
			<if test="email != null">email = #{email},</if>
			<if test="tel != null">tel = #{tel},</if>
			<if test="status != null">status = #{status},</if>
			<if test="editTime != null">editTime = #{editTime},</if>
			<if test="editUserName != null">editUserName = #{editUserName}</if>
		</set>
		where userId = #{userId};
	</update>
	
	<!-- 删除用户 -->
	<delete id="deleteUser" parameterType="list">
		delete from user
		where userId in 
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>
</mapper> 
